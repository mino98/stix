/* Generated By:JavaCC: Do not edit this line. Condition.java */
package uk.ac.ed.inf.wimo.stix.agent.util.condition;

import java.io.StringReader;
import java.io.IOException;
import uk.ac.ed.inf.wimo.stix.agent.engine.WorkflowException;

public class Condition implements ConditionConstants {

        IdentValueRetriever idValueRetriever;
        String conditionString;

        public void registerIdentValueRetriever(IdentValueRetriever ivr) {
                idValueRetriever = ivr;
        }

        public Condition(String condition) {
                this(new StringReader(condition));
                this.conditionString = condition;
        }

        public void reInit() {
                this.ReInit(new StringReader(conditionString));
        }

        public boolean parse() throws NumberFormatException, ParseException, WorkflowException, IOException {
                return this.expression();
        }

        public String toString() {
                return conditionString;
        }

  final public boolean expression() throws ParseException, NumberFormatException, WorkflowException, IOException {
        boolean value;
        boolean temp;
    value = simpleBoolExpr();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        temp = simpleBoolExpr();
            value = value && temp;
        break;
      case OR:
        jj_consume_token(OR);
        temp = simpleBoolExpr();
            value = value || temp;
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public boolean simpleBoolExpr() throws ParseException, NumberFormatException, WorkflowException, IOException {
        double mathValue;
        double tempMathValue;
        boolean exprValue;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASH:
      jj_consume_token(HASH);
      exprValue = stringEquality();
      jj_consume_token(HASH);
          {if (true) return exprValue;}
      break;
    case SUB:
    case OPENPAR:
    case NUMBER:
    case IDENTIFIER:
      mathValue = simpleMathExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        tempMathValue = simpleMathExpr();
            exprValue = (mathValue == tempMathValue);
        break;
      case MOR:
        jj_consume_token(MOR);
        tempMathValue = simpleMathExpr();
            exprValue = (mathValue > tempMathValue);
        break;
      case LESS:
        jj_consume_token(LESS);
        tempMathValue = simpleMathExpr();
            exprValue = (mathValue < tempMathValue);
        break;
      case MOREEQUAL:
        jj_consume_token(MOREEQUAL);
        tempMathValue = simpleMathExpr();
            exprValue = (mathValue >= tempMathValue);
        break;
      case LESSEQUAL:
        jj_consume_token(LESSEQUAL);
        tempMathValue = simpleMathExpr();
            exprValue = (mathValue <= tempMathValue);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      {if (true) return exprValue;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean stringEquality() throws ParseException, IOException {
        Token t1, t2;
        boolean exprValue;
        String lhsValue;
    t1 = jj_consume_token(IDENTIFIER);
    lhsValue = idValueRetriever.getValue(t1.image);
    jj_consume_token(EQUAL);
    t2 = jj_consume_token(IDENTIFIER);
    {if (true) return t2.image.equals(lhsValue);}
    throw new Error("Missing return statement in function");
  }

  final public double simpleMathExpr() throws ParseException, NumberFormatException, WorkflowException, IOException {
        double value;
        double tempValue;
    value = productExpr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
        tempValue = productExpr();
        value += tempValue;
        break;
      case SUB:
        jj_consume_token(SUB);
        tempValue = productExpr();
           value -= tempValue;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public double productExpr() throws ParseException, NumberFormatException, WorkflowException, IOException {
        double value;
        double tempValue;
    value = primaryExpr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
        tempValue = primaryExpr();
        value *= tempValue;
        break;
      case DIV:
        jj_consume_token(DIV);
        tempValue = primaryExpr();
            value /= tempValue;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public double primaryExpr() throws ParseException, NumberFormatException, WorkflowException, IOException {
  Token t;
  double innerValue;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
    {if (true) return Double.parseDouble(t.image);}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
        String idValue = idValueRetriever.getValue(t.image);
        {if (true) return Double.parseDouble(idValue);}
      break;
    case OPENPAR:
      jj_consume_token(OPENPAR);
      innerValue = simpleMathExpr();
      jj_consume_token(CLOSEPAR);
    {if (true) return innerValue;}
      break;
    case SUB:
      jj_consume_token(SUB);
      innerValue = primaryExpr();
    {if (true) return (0.0 - innerValue);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ConditionTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x60000,0x60000,0x1f000,0x1804a0,0xc0,0xc0,0x300,0x300,0x180480,};
   }

  /** Constructor with InputStream. */
  public Condition(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Condition(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ConditionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Condition(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConditionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Condition(ConditionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ConditionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
