/* Generated By:JJTree&JavaCC: Do not edit this line. wikiTokenManager.java */package uk.ac.ed.wimo.stix.view.wiki;import java.io.*;public class wikiTokenManager implements wikiConstants{  public static  java.io.PrintStream debugStream = System.out;  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }private static final int jjStopStringLiteralDfa_3(int pos, long active0){   switch (pos)   {      case 0:         if ((active0 & 0x200000L) != 0L)         {            jjmatchedKind = 19;            return 7;         }         return -1;      case 1:         if ((active0 & 0x200000L) != 0L)         {            jjmatchedKind = 19;            jjmatchedPos = 1;            return 1;         }         return -1;      default :         return -1;   }}private static final int jjStartNfa_3(int pos, long active0){   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);}static private final int jjStopAtPos(int pos, int kind){   jjmatchedKind = kind;   jjmatchedPos = pos;   return pos + 1;}static private final int jjStartNfaWithStates_3(int pos, int kind, int state){   jjmatchedKind = kind;   jjmatchedPos = pos;   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) { return pos + 1; }   return jjMoveNfa_3(state, pos + 1);}static private final int jjMoveStringLiteralDfa0_3(){   switch(curChar)   {      case 125:         return jjMoveStringLiteralDfa1_3(0x200000L);      default :         return jjMoveNfa_3(0, 0);   }}static private final int jjMoveStringLiteralDfa1_3(long active0){   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_3(0, active0);      return 1;   }   switch(curChar)   {      case 125:         return jjMoveStringLiteralDfa2_3(active0, 0x200000L);      default :         break;   }   return jjStartNfa_3(0, active0);}static private final int jjMoveStringLiteralDfa2_3(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_3(0, old0);    try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_3(1, active0);      return 2;   }   switch(curChar)   {      case 125:         if ((active0 & 0x200000L) != 0L)            return jjStopAtPos(2, 21);         break;      default :         break;   }   return jjStartNfa_3(1, active0);}static private final void jjCheckNAdd(int state){   if (jjrounds[state] != jjround)   {      jjstateSet[jjnewStateCnt++] = state;      jjrounds[state] = jjround;   }}static private final void jjAddStates(int start, int end){   do {      jjstateSet[jjnewStateCnt++] = jjnextStates[start];   } while (start++ != end);}static private final void jjCheckNAddTwoStates(int state1, int state2){   jjCheckNAdd(state1);   jjCheckNAdd(state2);}static private final void jjCheckNAddStates(int start, int end){   do {      jjCheckNAdd(jjnextStates[start]);   } while (start++ != end);}static private final void jjCheckNAddStates(int start){   jjCheckNAdd(jjnextStates[start]);   jjCheckNAdd(jjnextStates[start + 1]);}static final long[] jjbitVec0 = {   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};static private final int jjMoveNfa_3(int startState, int curPos){   int[] nextStates;   int startsAt = 0;   jjnewStateCnt = 11;   int i = 1;   jjstateSet[0] = startState;   int j, kind = 0x7fffffff;   for (;;)   {      if (++jjround == 0x7fffffff)         ReInitRounds();      if (curChar < 64)      {         long l = 1L << curChar;         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 7:               case 1:                  if (kind > 18)                     kind = 18;                  jjCheckNAddStates(0, 2);                  break;               case 0:                  if (kind > 18)                     kind = 18;                  jjCheckNAddStates(3, 6);                  break;               case 3:                  if (kind > 18)                     kind = 18;                  jjCheckNAddStates(7, 9);                  break;               case 10:                  if (kind > 20)                     kind = 20;                  jjCheckNAdd(10);                  break;               default : break;            }         } while(i != startsAt);      }      else if (curChar < 128)      {         long l = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 7:                  if ((0xdfffffffffffffffL & l) != 0L)                  {                     if (kind > 18)                        kind = 18;                     jjCheckNAddStates(0, 2);                  }                  else if (curChar == 125)                  {                     if (kind > 19)                        kind = 19;                  }                  if (curChar == 125)                     jjCheckNAdd(1);                  break;               case 0:                  if ((0xdfffffffffffffffL & l) != 0L)                  {                     if (kind > 18)                        kind = 18;                     jjCheckNAddStates(3, 6);                  }                  else if (curChar == 125)                     jjAddStates(10, 11);                  if (curChar == 125)                  {                     if (kind > 19)                        kind = 19;                     jjCheckNAdd(1);                  }                  break;               case 1:                  if ((0xdfffffffffffffffL & l) == 0L)                     break;                  if (kind > 18)                     kind = 18;                  jjCheckNAddStates(0, 2);                  break;               case 2:               case 4:                  if (curChar == 125)                     jjCheckNAdd(3);                  break;               case 3:                  if ((0xdfffffffffffffffL & l) == 0L)                     break;                  if (kind > 18)                     kind = 18;                  jjCheckNAddStates(7, 9);                  break;               case 5:                  if (curChar == 125)                     jjstateSet[jjnewStateCnt++] = 4;                  break;               case 6:                  if (curChar == 125)                     jjAddStates(10, 11);                  break;               case 8:                  if (curChar == 125 && kind > 19)                     kind = 19;                  break;               case 9:                  if ((0xdfffffffffffffffL & l) == 0L)                     break;                  if (kind > 18)                     kind = 18;                  jjCheckNAddStates(3, 6);                  break;               case 10:                  if ((0xdfffffffffffffffL & l) == 0L)                     break;                  if (kind > 20)                     kind = 20;                  jjCheckNAdd(10);                  break;               default : break;            }         } while(i != startsAt);      }      else      {         int i2 = (curChar & 0xff) >> 6;         long l2 = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 7:               case 1:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 18)                     kind = 18;                  jjCheckNAddStates(0, 2);                  break;               case 0:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 18)                     kind = 18;                  jjCheckNAddStates(3, 6);                  break;               case 3:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 18)                     kind = 18;                  jjCheckNAddStates(7, 9);                  break;               case 10:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 20)                     kind = 20;                  jjCheckNAdd(10);                  break;               default : break;            }         } while(i != startsAt);      }      if (kind != 0x7fffffff)      {         jjmatchedKind = kind;         jjmatchedPos = curPos;         kind = 0x7fffffff;      }      ++curPos;      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))         return curPos;      try { curChar = input_stream.readChar(); }      catch(java.io.IOException e) { return curPos; }   }}private static final int jjStopStringLiteralDfa_9(int pos, long active0){   switch (pos)   {      default :         return -1;   }}private static final int jjStartNfa_9(int pos, long active0){   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0), pos + 1);}static private final int jjStartNfaWithStates_9(int pos, int kind, int state){   jjmatchedKind = kind;   jjmatchedPos = pos;   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) { return pos + 1; }   return jjMoveNfa_9(state, pos + 1);}static private final int jjMoveStringLiteralDfa0_9(){   switch(curChar)   {      case 35:         return jjStopAtPos(0, 53);      case 93:         return jjStopAtPos(0, 56);      case 124:         return jjStopAtPos(0, 55);      default :         return jjMoveNfa_9(0, 0);   }}static private final int jjMoveNfa_9(int startState, int curPos){   int[] nextStates;   int startsAt = 0;   jjnewStateCnt = 3;   int i = 1;   jjstateSet[0] = startState;   int j, kind = 0x7fffffff;   for (;;)   {      if (++jjround == 0x7fffffff)         ReInitRounds();      if (curChar < 64)      {         long l = 1L << curChar;         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 0:                  if ((0xfc00fff7ffffdbffL & l) != 0L)                     jjCheckNAdd(1);                  else if ((0x3ff000000000000L & l) != 0L)                  {                     if (kind > 54)                        kind = 54;                     jjCheckNAdd(2);                  }                  break;               case 1:                  if ((0xffffffffffffdbffL & l) == 0L)                     break;                  if (kind > 52)                     kind = 52;                  jjCheckNAdd(1);                  break;               case 2:                  if ((0x3ff000000000000L & l) == 0L)                     break;                  if (kind > 54)                     kind = 54;                  jjCheckNAdd(2);                  break;               default : break;            }         } while(i != startsAt);      }      else if (curChar < 128)      {         long l = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 0:                  if ((0xefffffffdfffffffL & l) != 0L)                     jjCheckNAdd(1);                  break;               case 1:                  if ((0xefffffffdfffffffL & l) == 0L)                     break;                  if (kind > 52)                     kind = 52;                  jjCheckNAdd(1);                  break;               default : break;            }         } while(i != startsAt);      }      else      {         int i2 = (curChar & 0xff) >> 6;         long l2 = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 0:                  if ((jjbitVec0[i2] & l2) != 0L)                     jjCheckNAdd(1);                  break;               case 1:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 52)                     kind = 52;                  jjCheckNAdd(1);                  break;               default : break;            }         } while(i != startsAt);      }      if (kind != 0x7fffffff)      {         jjmatchedKind = kind;         jjmatchedPos = curPos;         kind = 0x7fffffff;      }      ++curPos;      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))         return curPos;      try { curChar = input_stream.readChar(); }      catch(java.io.IOException e) { return curPos; }   }}private static final int jjStopStringLiteralDfa_0(int pos, long active0){   switch (pos)   {      case 0:         if ((active0 & 0x90L) != 0L)         {            jjmatchedKind = 9;            return -1;         }         return -1;      case 1:         if ((active0 & 0x90L) != 0L)         {            if (jjmatchedPos == 0)            {               jjmatchedKind = 9;               jjmatchedPos = 0;            }            return -1;         }         return -1;      case 2:         if ((active0 & 0x90L) != 0L)         {            if (jjmatchedPos == 0)            {               jjmatchedKind = 9;               jjmatchedPos = 0;            }            return -1;         }         return -1;      default :         return -1;   }}private static final int jjStartNfa_0(int pos, long active0){   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);}static private final int jjStartNfaWithStates_0(int pos, int kind, int state){   jjmatchedKind = kind;   jjmatchedPos = pos;   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) { return pos + 1; }   return jjMoveNfa_0(state, pos + 1);}static private final int jjMoveStringLiteralDfa0_0(){   switch(curChar)   {      case 10:         return jjStopAtPos(0, 57);      case 13:         return jjMoveStringLiteralDfa1_0(0x400000000000000L);      case 45:         return jjMoveStringLiteralDfa1_0(0x80L);      case 59:         return jjStopAtPos(0, 6);      case 91:         return jjStopAtPos(0, 8);      case 123:         return jjMoveStringLiteralDfa1_0(0x10L);      case 124:         return jjStopAtPos(0, 5);      default :         return jjMoveNfa_0(3, 0);   }}static private final int jjMoveStringLiteralDfa1_0(long active0){   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_0(0, active0);      return 1;   }   switch(curChar)   {      case 10:         if ((active0 & 0x400000000000000L) != 0L)            return jjStopAtPos(1, 58);         break;      case 45:         return jjMoveStringLiteralDfa2_0(active0, 0x80L);      case 123:         return jjMoveStringLiteralDfa2_0(active0, 0x10L);      default :         break;   }   return jjStartNfa_0(0, active0);}static private final int jjMoveStringLiteralDfa2_0(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_0(0, old0);    try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_0(1, active0);      return 2;   }   switch(curChar)   {      case 45:         return jjMoveStringLiteralDfa3_0(active0, 0x80L);      case 123:         if ((active0 & 0x10L) != 0L)            return jjStopAtPos(2, 4);         break;      default :         break;   }   return jjStartNfa_0(1, active0);}static private final int jjMoveStringLiteralDfa3_0(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_0(1, old0);    try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_0(2, active0);      return 3;   }   switch(curChar)   {      case 45:         if ((active0 & 0x80L) != 0L)            return jjStopAtPos(3, 7);         break;      default :         break;   }   return jjStartNfa_0(2, active0);}static private final int jjMoveNfa_0(int startState, int curPos){   int[] nextStates;   int startsAt = 0;   jjnewStateCnt = 4;   int i = 1;   jjstateSet[0] = startState;   int j, kind = 0x7fffffff;   for (;;)   {      if (++jjround == 0x7fffffff)         ReInitRounds();      if (curChar < 64)      {         long l = 1L << curChar;         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 3:                  if ((0xffffffffffffdbffL & l) != 0L)                  {                     if (kind > 9)                        kind = 9;                  }                  if (curChar == 35)                  {                     if (kind > 3)                        kind = 3;                     jjCheckNAdd(2);                  }                  else if (curChar == 42)                  {                     if (kind > 2)                        kind = 2;                     jjCheckNAdd(1);                  }                  else if (curChar == 33)                  {                     if (kind > 1)                        kind = 1;                     jjCheckNAdd(0);                  }                  break;               case 0:                  if (curChar != 33)                     break;                  if (kind > 1)                     kind = 1;                  jjCheckNAdd(0);                  break;               case 1:                  if (curChar != 42)                     break;                  if (kind > 2)                     kind = 2;                  jjCheckNAdd(1);                  break;               case 2:                  if (curChar != 35)                     break;                  if (kind > 3)                     kind = 3;                  jjCheckNAdd(2);                  break;               default : break;            }         } while(i != startsAt);      }      else if (curChar < 128)      {         long l = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 3:                  kind = 9;                  break;               default : break;            }         } while(i != startsAt);      }      else      {         int i2 = (curChar & 0xff) >> 6;         long l2 = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 3:                  if ((jjbitVec0[i2] & l2) != 0L && kind > 9)                     kind = 9;                  break;               default : break;            }         } while(i != startsAt);      }      if (kind != 0x7fffffff)      {         jjmatchedKind = kind;         jjmatchedPos = curPos;         kind = 0x7fffffff;      }      ++curPos;      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))         return curPos;      try { curChar = input_stream.readChar(); }      catch(java.io.IOException e) { return curPos; }   }}private static final int jjStopStringLiteralDfa_8(int pos, long active0){   switch (pos)   {      default :         return -1;   }}private static final int jjStartNfa_8(int pos, long active0){   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0), pos + 1);}static private final int jjStartNfaWithStates_8(int pos, int kind, int state){   jjmatchedKind = kind;   jjmatchedPos = pos;   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) { return pos + 1; }   return jjMoveNfa_8(state, pos + 1);}static private final int jjMoveStringLiteralDfa0_8(){   switch(curChar)   {      case 35:         return jjStopAtPos(0, 48);      case 93:         return jjStopAtPos(0, 51);      case 124:         return jjStopAtPos(0, 50);      default :         return jjMoveNfa_8(0, 0);   }}static private final int jjMoveNfa_8(int startState, int curPos){   int[] nextStates;   int startsAt = 0;   jjnewStateCnt = 3;   int i = 1;   jjstateSet[0] = startState;   int j, kind = 0x7fffffff;   for (;;)   {      if (++jjround == 0x7fffffff)         ReInitRounds();      if (curChar < 64)      {         long l = 1L << curChar;         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 0:                  if ((0xfc00fff7ffffdbffL & l) != 0L)                     jjCheckNAdd(1);                  else if ((0x3ff000000000000L & l) != 0L)                  {                     if (kind > 49)                        kind = 49;                     jjCheckNAdd(2);                  }                  break;               case 1:                  if ((0xffffffffffffdbffL & l) == 0L)                     break;                  if (kind > 47)                     kind = 47;                  jjCheckNAdd(1);                  break;               case 2:                  if ((0x3ff000000000000L & l) == 0L)                     break;                  if (kind > 49)                     kind = 49;                  jjCheckNAdd(2);                  break;               default : break;            }         } while(i != startsAt);      }      else if (curChar < 128)      {         long l = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 0:                  if ((0xefffffffdfffffffL & l) != 0L)                     jjCheckNAdd(1);                  break;               case 1:                  if ((0xefffffffdfffffffL & l) == 0L)                     break;                  if (kind > 47)                     kind = 47;                  jjCheckNAdd(1);                  break;               default : break;            }         } while(i != startsAt);      }      else      {         int i2 = (curChar & 0xff) >> 6;         long l2 = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 0:                  if ((jjbitVec0[i2] & l2) != 0L)                     jjCheckNAdd(1);                  break;               case 1:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 47)                     kind = 47;                  jjCheckNAdd(1);                  break;               default : break;            }         } while(i != startsAt);      }      if (kind != 0x7fffffff)      {         jjmatchedKind = kind;         jjmatchedPos = curPos;         kind = 0x7fffffff;      }      ++curPos;      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))         return curPos;      try { curChar = input_stream.readChar(); }      catch(java.io.IOException e) { return curPos; }   }}private static final int jjStopStringLiteralDfa_1(int pos, long active0){   switch (pos)   {      case 0:         if ((active0 & 0x2000L) != 0L)         {            jjmatchedKind = 11;            return 7;         }         return -1;      case 1:         if ((active0 & 0x2000L) != 0L)         {            jjmatchedKind = 11;            jjmatchedPos = 1;            return 1;         }         return -1;      default :         return -1;   }}private static final int jjStartNfa_1(int pos, long active0){   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);}static private final int jjStartNfaWithStates_1(int pos, int kind, int state){   jjmatchedKind = kind;   jjmatchedPos = pos;   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) { return pos + 1; }   return jjMoveNfa_1(state, pos + 1);}static private final int jjMoveStringLiteralDfa0_1(){   switch(curChar)   {      case 125:         return jjMoveStringLiteralDfa1_1(0x2000L);      default :         return jjMoveNfa_1(0, 0);   }}static private final int jjMoveStringLiteralDfa1_1(long active0){   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_1(0, active0);      return 1;   }   switch(curChar)   {      case 125:         return jjMoveStringLiteralDfa2_1(active0, 0x2000L);      default :         break;   }   return jjStartNfa_1(0, active0);}static private final int jjMoveStringLiteralDfa2_1(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_1(0, old0);    try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_1(1, active0);      return 2;   }   switch(curChar)   {      case 125:         if ((active0 & 0x2000L) != 0L)            return jjStopAtPos(2, 13);         break;      default :         break;   }   return jjStartNfa_1(1, active0);}static private final int jjMoveNfa_1(int startState, int curPos){   int[] nextStates;   int startsAt = 0;   jjnewStateCnt = 11;   int i = 1;   jjstateSet[0] = startState;   int j, kind = 0x7fffffff;   for (;;)   {      if (++jjround == 0x7fffffff)         ReInitRounds();      if (curChar < 64)      {         long l = 1L << curChar;         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 7:               case 1:                  if (kind > 10)                     kind = 10;                  jjCheckNAddStates(0, 2);                  break;               case 0:                  if (kind > 10)                     kind = 10;                  jjCheckNAddStates(3, 6);                  break;               case 3:                  if (kind > 10)                     kind = 10;                  jjCheckNAddStates(7, 9);                  break;               case 10:                  if (kind > 12)                     kind = 12;                  jjCheckNAdd(10);                  break;               default : break;            }         } while(i != startsAt);      }      else if (curChar < 128)      {         long l = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 7:                  if ((0xdfffffffffffffffL & l) != 0L)                  {                     if (kind > 10)                        kind = 10;                     jjCheckNAddStates(0, 2);                  }                  else if (curChar == 125)                  {                     if (kind > 11)                        kind = 11;                  }                  if (curChar == 125)                     jjCheckNAdd(1);                  break;               case 0:                  if ((0xdfffffffffffffffL & l) != 0L)                  {                     if (kind > 10)                        kind = 10;                     jjCheckNAddStates(3, 6);                  }                  else if (curChar == 125)                     jjAddStates(10, 11);                  if (curChar == 125)                  {                     if (kind > 11)                        kind = 11;                     jjCheckNAdd(1);                  }                  break;               case 1:                  if ((0xdfffffffffffffffL & l) == 0L)                     break;                  if (kind > 10)                     kind = 10;                  jjCheckNAddStates(0, 2);                  break;               case 2:               case 4:                  if (curChar == 125)                     jjCheckNAdd(3);                  break;               case 3:                  if ((0xdfffffffffffffffL & l) == 0L)                     break;                  if (kind > 10)                     kind = 10;                  jjCheckNAddStates(7, 9);                  break;               case 5:                  if (curChar == 125)                     jjstateSet[jjnewStateCnt++] = 4;                  break;               case 6:                  if (curChar == 125)                     jjAddStates(10, 11);                  break;               case 8:                  if (curChar == 125 && kind > 11)                     kind = 11;                  break;               case 9:                  if ((0xdfffffffffffffffL & l) == 0L)                     break;                  if (kind > 10)                     kind = 10;                  jjCheckNAddStates(3, 6);                  break;               case 10:                  if ((0xdfffffffffffffffL & l) == 0L)                     break;                  if (kind > 12)                     kind = 12;                  jjCheckNAdd(10);                  break;               default : break;            }         } while(i != startsAt);      }      else      {         int i2 = (curChar & 0xff) >> 6;         long l2 = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 7:               case 1:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 10)                     kind = 10;                  jjCheckNAddStates(0, 2);                  break;               case 0:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 10)                     kind = 10;                  jjCheckNAddStates(3, 6);                  break;               case 3:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 10)                     kind = 10;                  jjCheckNAddStates(7, 9);                  break;               case 10:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 12)                     kind = 12;                  jjCheckNAdd(10);                  break;               default : break;            }         } while(i != startsAt);      }      if (kind != 0x7fffffff)      {         jjmatchedKind = kind;         jjmatchedPos = curPos;         kind = 0x7fffffff;      }      ++curPos;      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))         return curPos;      try { curChar = input_stream.readChar(); }      catch(java.io.IOException e) { return curPos; }   }}private static final int jjStopStringLiteralDfa_6(int pos, long active0){   switch (pos)   {      case 0:         if ((active0 & 0x1000000000L) != 0L)            return 6;         return -1;      case 1:         if ((active0 & 0x1000000000L) != 0L)            return 1;         return -1;      default :         return -1;   }}private static final int jjStartNfa_6(int pos, long active0){   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);}static private final int jjStartNfaWithStates_6(int pos, int kind, int state){   jjmatchedKind = kind;   jjmatchedPos = pos;   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) { return pos + 1; }   return jjMoveNfa_6(state, pos + 1);}static private final int jjMoveStringLiteralDfa0_6(){   switch(curChar)   {      case 58:         return jjStopAtPos(0, 37);      case 91:         return jjStopAtPos(0, 35);      case 123:         return jjMoveStringLiteralDfa1_6(0x1000000000L);      default :         return jjMoveNfa_6(0, 0);   }}static private final int jjMoveStringLiteralDfa1_6(long active0){   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_6(0, active0);      return 1;   }   switch(curChar)   {      case 123:         return jjMoveStringLiteralDfa2_6(active0, 0x1000000000L);      default :         break;   }   return jjStartNfa_6(0, active0);}static private final int jjMoveStringLiteralDfa2_6(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_6(0, old0);    try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_6(1, active0);      return 2;   }   switch(curChar)   {      case 123:         if ((active0 & 0x1000000000L) != 0L)            return jjStopAtPos(2, 36);         break;      default :         break;   }   return jjStartNfa_6(1, active0);}static private final int jjMoveNfa_6(int startState, int curPos){   int[] nextStates;   int startsAt = 0;   jjnewStateCnt = 11;   int i = 1;   jjstateSet[0] = startState;   int j, kind = 0x7fffffff;   for (;;)   {      if (++jjround == 0x7fffffff)         ReInitRounds();      if (curChar < 64)      {         long l = 1L << curChar;         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 6:               case 1:                  if ((0xfbffffffffffdbffL & l) == 0L)                     break;                  if (kind > 38)                     kind = 38;                  jjCheckNAddStates(0, 2);                  break;               case 0:                  if ((0xfbffffffffffdbffL & l) != 0L)                  {                     if (kind > 38)                        kind = 38;                     jjCheckNAddStates(0, 2);                  }                  else if (curChar == 13)                     jjstateSet[jjnewStateCnt++] = 9;                  else if (curChar == 10)                  {                     if (kind > 41)                        kind = 41;                  }                  break;               case 3:                  if ((0xfbffffffffffdbffL & l) == 0L)                     break;                  if (kind > 38)                     kind = 38;                  jjCheckNAddStates(7, 9);                  break;               case 8:               case 9:                  if (curChar == 10 && kind > 41)                     kind = 41;                  break;               case 10:                  if (curChar == 13)                     jjstateSet[jjnewStateCnt++] = 9;                  break;               default : break;            }         } while(i != startsAt);      }      else if (curChar < 128)      {         long l = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 6:                  if ((0xf7fffffff7ffffffL & l) != 0L)                  {                     if (kind > 38)                        kind = 38;                     jjCheckNAddStates(0, 2);                  }                  else if (curChar == 123)                     jjCheckNAdd(1);                  break;               case 0:                  if ((0xf7fffffff7ffffffL & l) != 0L)                  {                     if (kind > 38)                        kind = 38;                     jjCheckNAddStates(0, 2);                  }                  else if (curChar == 123)                     jjstateSet[jjnewStateCnt++] = 6;                  if (curChar == 123)                     jjCheckNAdd(1);                  break;               case 1:                  if ((0xf7fffffff7ffffffL & l) == 0L)                     break;                  if (kind > 38)                     kind = 38;                  jjCheckNAddStates(0, 2);                  break;               case 2:               case 4:                  if (curChar == 123)                     jjCheckNAdd(3);                  break;               case 3:                  if ((0xf7fffffff7ffffffL & l) == 0L)                     break;                  if (kind > 38)                     kind = 38;                  jjCheckNAddStates(7, 9);                  break;               case 5:                  if (curChar == 123)                     jjstateSet[jjnewStateCnt++] = 4;                  break;               case 7:                  if (curChar == 123)                     jjstateSet[jjnewStateCnt++] = 6;                  break;               default : break;            }         } while(i != startsAt);      }      else      {         int i2 = (curChar & 0xff) >> 6;         long l2 = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 6:               case 1:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 38)                     kind = 38;                  jjCheckNAddStates(0, 2);                  break;               case 0:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 38)                     kind = 38;                  jjCheckNAddStates(0, 2);                  break;               case 3:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 38)                     kind = 38;                  jjCheckNAddStates(7, 9);                  break;               default : break;            }         } while(i != startsAt);      }      if (kind != 0x7fffffff)      {         jjmatchedKind = kind;         jjmatchedPos = curPos;         kind = 0x7fffffff;      }      ++curPos;      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))         return curPos;      try { curChar = input_stream.readChar(); }      catch(java.io.IOException e) { return curPos; }   }}private static final int jjStopStringLiteralDfa_7(int pos, long active0){   switch (pos)   {      default :         return -1;   }}private static final int jjStartNfa_7(int pos, long active0){   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0), pos + 1);}static private final int jjStartNfaWithStates_7(int pos, int kind, int state){   jjmatchedKind = kind;   jjmatchedPos = pos;   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) { return pos + 1; }   return jjMoveNfa_7(state, pos + 1);}static private final int jjMoveStringLiteralDfa0_7(){   switch(curChar)   {      case 35:         return jjStopAtPos(0, 43);      case 93:         return jjStopAtPos(0, 46);      case 124:         return jjStopAtPos(0, 45);      default :         return jjMoveNfa_7(0, 0);   }}static private final int jjMoveNfa_7(int startState, int curPos){   int[] nextStates;   int startsAt = 0;   jjnewStateCnt = 3;   int i = 1;   jjstateSet[0] = startState;   int j, kind = 0x7fffffff;   for (;;)   {      if (++jjround == 0x7fffffff)         ReInitRounds();      if (curChar < 64)      {         long l = 1L << curChar;         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 0:                  if ((0xfc00fff7ffffdbffL & l) != 0L)                     jjCheckNAdd(1);                  else if ((0x3ff000000000000L & l) != 0L)                  {                     if (kind > 44)                        kind = 44;                     jjCheckNAdd(2);                  }                  break;               case 1:                  if ((0xffffffffffffdbffL & l) == 0L)                     break;                  if (kind > 42)                     kind = 42;                  jjCheckNAdd(1);                  break;               case 2:                  if ((0x3ff000000000000L & l) == 0L)                     break;                  if (kind > 44)                     kind = 44;                  jjCheckNAdd(2);                  break;               default : break;            }         } while(i != startsAt);      }      else if (curChar < 128)      {         long l = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 0:                  if ((0xefffffffdfffffffL & l) != 0L)                     jjCheckNAdd(1);                  break;               case 1:                  if ((0xefffffffdfffffffL & l) == 0L)                     break;                  if (kind > 42)                     kind = 42;                  jjCheckNAdd(1);                  break;               default : break;            }         } while(i != startsAt);      }      else      {         int i2 = (curChar & 0xff) >> 6;         long l2 = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 0:                  if ((jjbitVec0[i2] & l2) != 0L)                     jjCheckNAdd(1);                  break;               case 1:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 42)                     kind = 42;                  jjCheckNAdd(1);                  break;               default : break;            }         } while(i != startsAt);      }      if (kind != 0x7fffffff)      {         jjmatchedKind = kind;         jjmatchedPos = curPos;         kind = 0x7fffffff;      }      ++curPos;      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))         return curPos;      try { curChar = input_stream.readChar(); }      catch(java.io.IOException e) { return curPos; }   }}private static final int jjStopStringLiteralDfa_5(int pos, long active0){   switch (pos)   {      case 0:         if ((active0 & 0x20000000L) != 0L)            return 6;         return -1;      case 1:         if ((active0 & 0x20000000L) != 0L)            return 1;         return -1;      default :         return -1;   }}private static final int jjStartNfa_5(int pos, long active0){   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);}static private final int jjStartNfaWithStates_5(int pos, int kind, int state){   jjmatchedKind = kind;   jjmatchedPos = pos;   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) { return pos + 1; }   return jjMoveNfa_5(state, pos + 1);}static private final int jjMoveStringLiteralDfa0_5(){   switch(curChar)   {      case 91:         return jjStopAtPos(0, 28);      case 123:         return jjMoveStringLiteralDfa1_5(0x20000000L);      case 124:         return jjStopAtPos(0, 30);      default :         return jjMoveNfa_5(0, 0);   }}static private final int jjMoveStringLiteralDfa1_5(long active0){   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_5(0, active0);      return 1;   }   switch(curChar)   {      case 123:         return jjMoveStringLiteralDfa2_5(active0, 0x20000000L);      default :         break;   }   return jjStartNfa_5(0, active0);}static private final int jjMoveStringLiteralDfa2_5(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_5(0, old0);    try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_5(1, active0);      return 2;   }   switch(curChar)   {      case 123:         if ((active0 & 0x20000000L) != 0L)            return jjStopAtPos(2, 29);         break;      default :         break;   }   return jjStartNfa_5(1, active0);}static private final int jjMoveNfa_5(int startState, int curPos){   int[] nextStates;   int startsAt = 0;   jjnewStateCnt = 11;   int i = 1;   jjstateSet[0] = startState;   int j, kind = 0x7fffffff;   for (;;)   {      if (++jjround == 0x7fffffff)         ReInitRounds();      if (curChar < 64)      {         long l = 1L << curChar;         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 6:               case 1:                  if ((0xffffffffffffdbffL & l) == 0L)                     break;                  if (kind > 31)                     kind = 31;                  jjCheckNAddStates(0, 2);                  break;               case 0:                  if ((0xffffffffffffdbffL & l) != 0L)                  {                     if (kind > 31)                        kind = 31;                     jjCheckNAddStates(0, 2);                  }                  else if (curChar == 13)                     jjstateSet[jjnewStateCnt++] = 9;                  else if (curChar == 10)                  {                     if (kind > 34)                        kind = 34;                  }                  break;               case 3:                  if ((0xffffffffffffdbffL & l) == 0L)                     break;                  if (kind > 31)                     kind = 31;                  jjCheckNAddStates(7, 9);                  break;               case 8:               case 9:                  if (curChar == 10 && kind > 34)                     kind = 34;                  break;               case 10:                  if (curChar == 13)                     jjstateSet[jjnewStateCnt++] = 9;                  break;               default : break;            }         } while(i != startsAt);      }      else if (curChar < 128)      {         long l = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 6:                  if ((0xe7fffffff7ffffffL & l) != 0L)                  {                     if (kind > 31)                        kind = 31;                     jjCheckNAddStates(0, 2);                  }                  else if (curChar == 123)                     jjCheckNAdd(1);                  break;               case 0:                  if ((0xe7fffffff7ffffffL & l) != 0L)                  {                     if (kind > 31)                        kind = 31;                     jjCheckNAddStates(0, 2);                  }                  else if (curChar == 123)                     jjstateSet[jjnewStateCnt++] = 6;                  if (curChar == 123)                     jjCheckNAdd(1);                  break;               case 1:                  if ((0xe7fffffff7ffffffL & l) == 0L)                     break;                  if (kind > 31)                     kind = 31;                  jjCheckNAddStates(0, 2);                  break;               case 2:               case 4:                  if (curChar == 123)                     jjCheckNAdd(3);                  break;               case 3:                  if ((0xe7fffffff7ffffffL & l) == 0L)                     break;                  if (kind > 31)                     kind = 31;                  jjCheckNAddStates(7, 9);                  break;               case 5:                  if (curChar == 123)                     jjstateSet[jjnewStateCnt++] = 4;                  break;               case 7:                  if (curChar == 123)                     jjstateSet[jjnewStateCnt++] = 6;                  break;               default : break;            }         } while(i != startsAt);      }      else      {         int i2 = (curChar & 0xff) >> 6;         long l2 = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 6:               case 1:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 31)                     kind = 31;                  jjCheckNAddStates(0, 2);                  break;               case 0:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 31)                     kind = 31;                  jjCheckNAddStates(0, 2);                  break;               case 3:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 31)                     kind = 31;                  jjCheckNAddStates(7, 9);                  break;               default : break;            }         } while(i != startsAt);      }      if (kind != 0x7fffffff)      {         jjmatchedKind = kind;         jjmatchedPos = curPos;         kind = 0x7fffffff;      }      ++curPos;      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))         return curPos;      try { curChar = input_stream.readChar(); }      catch(java.io.IOException e) { return curPos; }   }}private static final int jjStopStringLiteralDfa_2(int pos, long active0){   switch (pos)   {      case 0:         if ((active0 & 0x20000L) != 0L)         {            jjmatchedKind = 15;            return 7;         }         return -1;      case 1:         if ((active0 & 0x20000L) != 0L)         {            jjmatchedKind = 15;            jjmatchedPos = 1;            return 1;         }         return -1;      default :         return -1;   }}private static final int jjStartNfa_2(int pos, long active0){   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);}static private final int jjStartNfaWithStates_2(int pos, int kind, int state){   jjmatchedKind = kind;   jjmatchedPos = pos;   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) { return pos + 1; }   return jjMoveNfa_2(state, pos + 1);}static private final int jjMoveStringLiteralDfa0_2(){   switch(curChar)   {      case 125:         return jjMoveStringLiteralDfa1_2(0x20000L);      default :         return jjMoveNfa_2(0, 0);   }}static private final int jjMoveStringLiteralDfa1_2(long active0){   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_2(0, active0);      return 1;   }   switch(curChar)   {      case 125:         return jjMoveStringLiteralDfa2_2(active0, 0x20000L);      default :         break;   }   return jjStartNfa_2(0, active0);}static private final int jjMoveStringLiteralDfa2_2(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_2(0, old0);    try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_2(1, active0);      return 2;   }   switch(curChar)   {      case 125:         if ((active0 & 0x20000L) != 0L)            return jjStopAtPos(2, 17);         break;      default :         break;   }   return jjStartNfa_2(1, active0);}static private final int jjMoveNfa_2(int startState, int curPos){   int[] nextStates;   int startsAt = 0;   jjnewStateCnt = 11;   int i = 1;   jjstateSet[0] = startState;   int j, kind = 0x7fffffff;   for (;;)   {      if (++jjround == 0x7fffffff)         ReInitRounds();      if (curChar < 64)      {         long l = 1L << curChar;         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 7:               case 1:                  if (kind > 14)                     kind = 14;                  jjCheckNAddStates(0, 2);                  break;               case 0:                  if (kind > 14)                     kind = 14;                  jjCheckNAddStates(3, 6);                  break;               case 3:                  if (kind > 14)                     kind = 14;                  jjCheckNAddStates(7, 9);                  break;               case 10:                  if (kind > 16)                     kind = 16;                  jjCheckNAdd(10);                  break;               default : break;            }         } while(i != startsAt);      }      else if (curChar < 128)      {         long l = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 7:                  if ((0xdfffffffffffffffL & l) != 0L)                  {                     if (kind > 14)                        kind = 14;                     jjCheckNAddStates(0, 2);                  }                  else if (curChar == 125)                  {                     if (kind > 15)                        kind = 15;                  }                  if (curChar == 125)                     jjCheckNAdd(1);                  break;               case 0:                  if ((0xdfffffffffffffffL & l) != 0L)                  {                     if (kind > 14)                        kind = 14;                     jjCheckNAddStates(3, 6);                  }                  else if (curChar == 125)                     jjAddStates(10, 11);                  if (curChar == 125)                  {                     if (kind > 15)                        kind = 15;                     jjCheckNAdd(1);                  }                  break;               case 1:                  if ((0xdfffffffffffffffL & l) == 0L)                     break;                  if (kind > 14)                     kind = 14;                  jjCheckNAddStates(0, 2);                  break;               case 2:               case 4:                  if (curChar == 125)                     jjCheckNAdd(3);                  break;               case 3:                  if ((0xdfffffffffffffffL & l) == 0L)                     break;                  if (kind > 14)                     kind = 14;                  jjCheckNAddStates(7, 9);                  break;               case 5:                  if (curChar == 125)                     jjstateSet[jjnewStateCnt++] = 4;                  break;               case 6:                  if (curChar == 125)                     jjAddStates(10, 11);                  break;               case 8:                  if (curChar == 125 && kind > 15)                     kind = 15;                  break;               case 9:                  if ((0xdfffffffffffffffL & l) == 0L)                     break;                  if (kind > 14)                     kind = 14;                  jjCheckNAddStates(3, 6);                  break;               case 10:                  if ((0xdfffffffffffffffL & l) == 0L)                     break;                  if (kind > 16)                     kind = 16;                  jjCheckNAdd(10);                  break;               default : break;            }         } while(i != startsAt);      }      else      {         int i2 = (curChar & 0xff) >> 6;         long l2 = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 7:               case 1:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 14)                     kind = 14;                  jjCheckNAddStates(0, 2);                  break;               case 0:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 14)                     kind = 14;                  jjCheckNAddStates(3, 6);                  break;               case 3:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 14)                     kind = 14;                  jjCheckNAddStates(7, 9);                  break;               case 10:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 16)                     kind = 16;                  jjCheckNAdd(10);                  break;               default : break;            }         } while(i != startsAt);      }      if (kind != 0x7fffffff)      {         jjmatchedKind = kind;         jjmatchedPos = curPos;         kind = 0x7fffffff;      }      ++curPos;      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))         return curPos;      try { curChar = input_stream.readChar(); }      catch(java.io.IOException e) { return curPos; }   }}private static final int jjStopStringLiteralDfa_4(int pos, long active0){   switch (pos)   {      case 0:         if ((active0 & 0x800000L) != 0L)            return 6;         return -1;      case 1:         if ((active0 & 0x800000L) != 0L)            return 1;         return -1;      default :         return -1;   }}private static final int jjStartNfa_4(int pos, long active0){   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);}static private final int jjStartNfaWithStates_4(int pos, int kind, int state){   jjmatchedKind = kind;   jjmatchedPos = pos;   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) { return pos + 1; }   return jjMoveNfa_4(state, pos + 1);}static private final int jjMoveStringLiteralDfa0_4(){   switch(curChar)   {      case 91:         return jjStopAtPos(0, 22);      case 123:         return jjMoveStringLiteralDfa1_4(0x800000L);      default :         return jjMoveNfa_4(0, 0);   }}static private final int jjMoveStringLiteralDfa1_4(long active0){   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_4(0, active0);      return 1;   }   switch(curChar)   {      case 123:         return jjMoveStringLiteralDfa2_4(active0, 0x800000L);      default :         break;   }   return jjStartNfa_4(0, active0);}static private final int jjMoveStringLiteralDfa2_4(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_4(0, old0);    try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_4(1, active0);      return 2;   }   switch(curChar)   {      case 123:         if ((active0 & 0x800000L) != 0L)            return jjStopAtPos(2, 23);         break;      default :         break;   }   return jjStartNfa_4(1, active0);}static private final int jjMoveNfa_4(int startState, int curPos){   int[] nextStates;   int startsAt = 0;   jjnewStateCnt = 11;   int i = 1;   jjstateSet[0] = startState;   int j, kind = 0x7fffffff;   for (;;)   {      if (++jjround == 0x7fffffff)         ReInitRounds();      if (curChar < 64)      {         long l = 1L << curChar;         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 6:               case 1:                  if ((0xffffffffffffdbffL & l) == 0L)                     break;                  if (kind > 24)                     kind = 24;                  jjCheckNAddStates(0, 2);                  break;               case 0:                  if ((0xffffffffffffdbffL & l) != 0L)                  {                     if (kind > 24)                        kind = 24;                     jjCheckNAddStates(0, 2);                  }                  else if (curChar == 13)                     jjstateSet[jjnewStateCnt++] = 9;                  else if (curChar == 10)                  {                     if (kind > 27)                        kind = 27;                  }                  break;               case 3:                  if ((0xffffffffffffdbffL & l) == 0L)                     break;                  if (kind > 24)                     kind = 24;                  jjCheckNAddStates(7, 9);                  break;               case 8:               case 9:                  if (curChar == 10 && kind > 27)                     kind = 27;                  break;               case 10:                  if (curChar == 13)                     jjstateSet[jjnewStateCnt++] = 9;                  break;               default : break;            }         } while(i != startsAt);      }      else if (curChar < 128)      {         long l = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 6:                  if ((0xf7fffffff7ffffffL & l) != 0L)                  {                     if (kind > 24)                        kind = 24;                     jjCheckNAddStates(0, 2);                  }                  else if (curChar == 123)                     jjCheckNAdd(1);                  break;               case 0:                  if ((0xf7fffffff7ffffffL & l) != 0L)                  {                     if (kind > 24)                        kind = 24;                     jjCheckNAddStates(0, 2);                  }                  else if (curChar == 123)                     jjstateSet[jjnewStateCnt++] = 6;                  if (curChar == 123)                     jjCheckNAdd(1);                  break;               case 1:                  if ((0xf7fffffff7ffffffL & l) == 0L)                     break;                  if (kind > 24)                     kind = 24;                  jjCheckNAddStates(0, 2);                  break;               case 2:               case 4:                  if (curChar == 123)                     jjCheckNAdd(3);                  break;               case 3:                  if ((0xf7fffffff7ffffffL & l) == 0L)                     break;                  if (kind > 24)                     kind = 24;                  jjCheckNAddStates(7, 9);                  break;               case 5:                  if (curChar == 123)                     jjstateSet[jjnewStateCnt++] = 4;                  break;               case 7:                  if (curChar == 123)                     jjstateSet[jjnewStateCnt++] = 6;                  break;               default : break;            }         } while(i != startsAt);      }      else      {         int i2 = (curChar & 0xff) >> 6;         long l2 = 1L << (curChar & 077);         MatchLoop: do         {            switch(jjstateSet[--i])            {               case 6:               case 1:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 24)                     kind = 24;                  jjCheckNAddStates(0, 2);                  break;               case 0:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 24)                     kind = 24;                  jjCheckNAddStates(0, 2);                  break;               case 3:                  if ((jjbitVec0[i2] & l2) == 0L)                     break;                  if (kind > 24)                     kind = 24;                  jjCheckNAddStates(7, 9);                  break;               default : break;            }         } while(i != startsAt);      }      if (kind != 0x7fffffff)      {         jjmatchedKind = kind;         jjmatchedPos = curPos;         kind = 0x7fffffff;      }      ++curPos;      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))         return curPos;      try { curChar = input_stream.readChar(); }      catch(java.io.IOException e) { return curPos; }   }}static final int[] jjnextStates = {   1, 2, 5, 1, 2, 5, 10, 2, 5, 3, 7, 8, };public static final String[] jjstrLiteralImages = {"", null, null, null, "\173\173\173", "\174", "\73", "\55\55\55\55", "\133", null, null, null, null, "\175\175\175", null, null, null, "\175\175\175", null, null, null, "\175\175\175", null, null, null, null, null, null, "\133", "\173\173\173", "\174", null, null, null, null, "\133", "\173\173\173", "\72", null, null, null, null, null, "\43", null, "\174", "\135", null, "\43", null, "\174", "\135", null, "\43", null, "\174", "\135", "\12", "\15\12", };public static final String[] lexStateNames = {   "DEFAULT",    "ANYTHING",    "TABLE_ANYTHING",    "TERM_ANYTHING",    "TEXT",    "TABLE_TEXT",    "TERM_TEXT",    "LINK",    "TABLE_LINK",    "TERM_LINK", };public static final int[] jjnewLexState = {   -1, 4, 4, 4, 1, 5, 6, 4, 7, 4, -1, -1, -1, 4, -1, -1, -1, 5, -1, -1, -1, 6, 7, 1, -1,    -1, -1, 0, 8, 2, -1, -1, -1, -1, 0, 9, 3, -1, -1, -1, -1, 0, -1, -1, -1, -1, 4, -1, -1, -1,    -1, 5, -1, -1, -1, -1, 6, -1, -1, };static final long[] jjtoToken = {   0x7fffe7cf9fffdffL, };static final long[] jjtoMore = {   0x200L, };static protected SimpleCharStream input_stream;static private final int[] jjrounds = new int[11];static private final int[] jjstateSet = new int[22];static protected char curChar;public wikiTokenManager(SimpleCharStream stream){   if (input_stream != null)      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);   input_stream = stream;}public wikiTokenManager(SimpleCharStream stream, int lexState){   this(stream);   SwitchTo(lexState);}static public void ReInit(SimpleCharStream stream){   jjmatchedPos = jjnewStateCnt = 0;   curLexState = defaultLexState;   input_stream = stream;   ReInitRounds();}static private final void ReInitRounds(){   int i;   jjround = 0x80000001;   for (i = 11; i-- > 0;)      jjrounds[i] = 0x80000000;}static public void ReInit(SimpleCharStream stream, int lexState){   ReInit(stream);   SwitchTo(lexState);}static public void SwitchTo(int lexState){   if (lexState >= 10 || lexState < 0)      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);   else      curLexState = lexState;}static protected Token jjFillToken(){   Token t = Token.newToken(jjmatchedKind);   t.kind = jjmatchedKind;   String im = jjstrLiteralImages[jjmatchedKind];   t.image = (im == null) ? input_stream.GetImage() : im;   t.beginLine = input_stream.getBeginLine();   t.beginColumn = input_stream.getBeginColumn();   t.endLine = input_stream.getEndLine();   t.endColumn = input_stream.getEndColumn();   return t;}static int curLexState = 0;static int defaultLexState = 0;static int jjnewStateCnt;static int jjround;static int jjmatchedPos;static int jjmatchedKind;public static Token getNextToken() {  int kind;  Token specialToken = null;  Token matchedToken;  int curPos = 0;  EOFLoop :  for (;;)  {      try      {           curChar = input_stream.BeginToken();   }        catch(java.io.IOException e)   {              jjmatchedKind = 0;      matchedToken = jjFillToken();      return matchedToken;   }   for (;;)   {     switch(curLexState)     {       case 0:         jjmatchedKind = 0x7fffffff;         jjmatchedPos = 0;         curPos = jjMoveStringLiteralDfa0_0();         break;       case 1:         jjmatchedKind = 0x7fffffff;         jjmatchedPos = 0;         curPos = jjMoveStringLiteralDfa0_1();         break;       case 2:         jjmatchedKind = 0x7fffffff;         jjmatchedPos = 0;         curPos = jjMoveStringLiteralDfa0_2();         break;       case 3:         jjmatchedKind = 0x7fffffff;         jjmatchedPos = 0;         curPos = jjMoveStringLiteralDfa0_3();         break;       case 4:         jjmatchedKind = 0x7fffffff;         jjmatchedPos = 0;         curPos = jjMoveStringLiteralDfa0_4();         break;       case 5:         jjmatchedKind = 0x7fffffff;         jjmatchedPos = 0;         curPos = jjMoveStringLiteralDfa0_5();         break;       case 6:         jjmatchedKind = 0x7fffffff;         jjmatchedPos = 0;         curPos = jjMoveStringLiteralDfa0_6();         break;       case 7:         jjmatchedKind = 0x7fffffff;         jjmatchedPos = 0;         curPos = jjMoveStringLiteralDfa0_7();         break;       case 8:         jjmatchedKind = 0x7fffffff;         jjmatchedPos = 0;         curPos = jjMoveStringLiteralDfa0_8();         break;       case 9:         jjmatchedKind = 0x7fffffff;         jjmatchedPos = 0;         curPos = jjMoveStringLiteralDfa0_9();         break;     }     if (jjmatchedKind != 0x7fffffff)     {        if (jjmatchedPos + 1 < curPos)           input_stream.backup(curPos - jjmatchedPos - 1);        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)        {           matchedToken = jjFillToken();       if (jjnewLexState[jjmatchedKind] != -1)         curLexState = jjnewLexState[jjmatchedKind];           return matchedToken;        }      if (jjnewLexState[jjmatchedKind] != -1)        curLexState = jjnewLexState[jjmatchedKind];        curPos = 0;        jjmatchedKind = 0x7fffffff;        try {           curChar = input_stream.readChar();           continue;        }        catch (java.io.IOException e1) { }     }     int error_line = input_stream.getEndLine();     int error_column = input_stream.getEndColumn();     String error_after = null;     boolean EOFSeen = false;     try { input_stream.readChar(); input_stream.backup(1); }     catch (java.io.IOException e1) {        EOFSeen = true;        error_after = curPos <= 1 ? "" : input_stream.GetImage();        if (curChar == '\n' || curChar == '\r') {           error_line++;           error_column = 0;        }        else           error_column++;     }     if (!EOFSeen) {        input_stream.backup(1);        error_after = curPos <= 1 ? "" : input_stream.GetImage();     }     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);   }  }}}