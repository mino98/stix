/* Generated By:JJTree&JavaCC: Do not edit this line. wiki.java */package uk.ac.ed.wimo.stix.view.wiki;import java.io.*;public class wiki/*@bgen(jjtree)*/ implements wikiTreeConstants, wikiConstants {/*@bgen(jjtree)*/    protected static JJTwikiState jjtree = new JJTwikiState();    public static void main(String args[]) {        System.out.println("Reading from file: " + args[0]);        try {            File io = new File(args[0]);            FileInputStream is = new FileInputStream(io);            wiki t = new wiki(is);            ASTStart n = t.Start();            wikiDumpVisitor v = new wikiDumpVisitor();            n.jjtAccept(v, null);            is.close();        } catch (Exception e) {            System.out.println("Oops.");            System.out.println(e.getMessage());            e.printStackTrace();        }    }    static final public ASTStart Start() throws ParseException {        /*@bgen(jjtree) Start */        ASTStart jjtn000 = new ASTStart(JJTSTART);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        try {            label_1:            while (true) {                Line();                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                    case HEADER:                    case BULLETS:                    case NUMBERS:                    case ANY:                    case COLUMN:                    case TERM:                    case DEFAULT_LINK:                    case LINK_START:                    case ANY_START:                    case STUFF:                    case TABLE_LINK_START:                    case TABLE_ANY_START:                    case TABLE_COLUMN:                    case TABLE_STUFF:                    case TERM_LINK_START:                    case TERM_ANY_START:                    case TERM_STUFF:                    case 57:                    case 58:                        ;                        break;                    default:                        jj_la1[0] = jj_gen;                        break label_1;                }            }            jj_consume_token(0);            jjtree.closeNodeScope(jjtn000, true);            jjtc000 = false;            {                if (true) {                    return jjtn000;                }            }        } catch (Throwable jjte000) {            if (jjtc000) {                jjtree.clearNodeScope(jjtn000);                jjtc000 = false;            } else {                jjtree.popNode();            }            if (jjte000 instanceof RuntimeException) {                {                    if (true) {                        throw (RuntimeException) jjte000;                    }                }            }            if (jjte000 instanceof ParseException) {                {                    if (true) {                        throw (ParseException) jjte000;                    }                }            }            {                if (true) {                    throw (Error) jjte000;                }            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }        throw new Error("Missing return statement in function");    }    static final public void Line() throws ParseException {        /*@bgen(jjtree) Line */        ASTLine jjtn000 = new ASTLine(JJTLINE);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        try {            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case NUMBERS:                    Numbers();                    jj_consume_token(NEWLINE);                    break;                case COLUMN:                case TABLE_COLUMN:                    Table();                    jj_consume_token(TABLE_NEWLINE);                    break;                case TERM:                    Term();                    jj_consume_token(TERM_NEWLINE);                    break;                case HEADER:                    Header();                    jj_consume_token(NEWLINE);                    break;                case BULLETS:                    Bullets();                    jj_consume_token(NEWLINE);                    break;                case ANY:                case DEFAULT_LINK:                case LINK_START:                case ANY_START:                case STUFF:                case TABLE_LINK_START:                case TABLE_ANY_START:                case TABLE_STUFF:                case TERM_LINK_START:                case TERM_ANY_START:                case TERM_STUFF:                    Text();                    jj_consume_token(NEWLINE);                    break;                case 57:                case 58:                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                        case 57:                            jj_consume_token(57);                            break;                        case 58:                            jj_consume_token(58);                            break;                        default:                            jj_la1[1] = jj_gen;                            jj_consume_token(-1);                            throw new ParseException();                    }                    break;                default:                    jj_la1[2] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }        } catch (Throwable jjte000) {            if (jjtc000) {                jjtree.clearNodeScope(jjtn000);                jjtc000 = false;            } else {                jjtree.popNode();            }            if (jjte000 instanceof RuntimeException) {                {                    if (true) {                        throw (RuntimeException) jjte000;                    }                }            }            if (jjte000 instanceof ParseException) {                {                    if (true) {                        throw (ParseException) jjte000;                    }                }            }            {                if (true) {                    throw (Error) jjte000;                }            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void Header() throws ParseException {        /*@bgen(jjtree) Header */        ASTHeader jjtn000 = new ASTHeader(JJTHEADER);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        Token t;        try {            t = jj_consume_token(HEADER);            jjtn000.setSize(t.image);            Text();        } catch (Throwable jjte000) {            if (jjtc000) {                jjtree.clearNodeScope(jjtn000);                jjtc000 = false;            } else {                jjtree.popNode();            }            if (jjte000 instanceof RuntimeException) {                {                    if (true) {                        throw (RuntimeException) jjte000;                    }                }            }            if (jjte000 instanceof ParseException) {                {                    if (true) {                        throw (ParseException) jjte000;                    }                }            }            {                if (true) {                    throw (Error) jjte000;                }            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void HorizontalRuler() throws ParseException {        /*@bgen(jjtree) HorizontalRuler */        ASTHorizontalRuler jjtn000 = new ASTHorizontalRuler(JJTHORIZONTALRULER);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        try {            jj_consume_token(HORIZONTAL_RULER);            Text();        } catch (Throwable jjte000) {            if (jjtc000) {                jjtree.clearNodeScope(jjtn000);                jjtc000 = false;            } else {                jjtree.popNode();            }            if (jjte000 instanceof RuntimeException) {                {                    if (true) {                        throw (RuntimeException) jjte000;                    }                }            }            if (jjte000 instanceof ParseException) {                {                    if (true) {                        throw (ParseException) jjte000;                    }                }            }            {                if (true) {                    throw (Error) jjte000;                }            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void Bullets() throws ParseException {        /*@bgen(jjtree) Bullets */        ASTBullets jjtn000 = new ASTBullets(JJTBULLETS);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        Token t;        try {            t = jj_consume_token(BULLETS);            jjtn000.setSize(t.image);            Text();        } catch (Throwable jjte000) {            if (jjtc000) {                jjtree.clearNodeScope(jjtn000);                jjtc000 = false;            } else {                jjtree.popNode();            }            if (jjte000 instanceof RuntimeException) {                {                    if (true) {                        throw (RuntimeException) jjte000;                    }                }            }            if (jjte000 instanceof ParseException) {                {                    if (true) {                        throw (ParseException) jjte000;                    }                }            }            {                if (true) {                    throw (Error) jjte000;                }            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void Numbers() throws ParseException {        /*@bgen(jjtree) Numbers */        ASTNumbers jjtn000 = new ASTNumbers(JJTNUMBERS);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        Token t;        try {            t = jj_consume_token(NUMBERS);            jjtn000.setSize(t.image);            Text();        } catch (Throwable jjte000) {            if (jjtc000) {                jjtree.clearNodeScope(jjtn000);                jjtc000 = false;            } else {                jjtree.popNode();            }            if (jjte000 instanceof RuntimeException) {                {                    if (true) {                        throw (RuntimeException) jjte000;                    }                }            }            if (jjte000 instanceof ParseException) {                {                    if (true) {                        throw (ParseException) jjte000;                    }                }            }            {                if (true) {                    throw (Error) jjte000;                }            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void Term() throws ParseException {        /*@bgen(jjtree) Term */        ASTTerm jjtn000 = new ASTTerm(JJTTERM);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        try {            jj_consume_token(TERM);            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case ANY:                case DEFAULT_LINK:                case LINK_START:                case ANY_START:                case STUFF:                case TABLE_LINK_START:                case TABLE_ANY_START:                case TABLE_STUFF:                case TERM_LINK_START:                case TERM_ANY_START:                case TERM_STUFF:                    Text();                    break;                default:                    jj_la1[3] = jj_gen;                    ;            }            jj_consume_token(DEF);            Text();            jjtree.closeNodeScope(jjtn000, true);            jjtc000 = false;            if (jjtn000.jjtGetNumChildren() > 1) {                jjtn000.term = (ASTText) jjtn000.jjtGetChild(0);                jjtn000.def = (ASTText) jjtn000.jjtGetChild(1);            } else {                jjtn000.def = (ASTText) jjtn000.jjtGetChild(0);            }        } catch (Throwable jjte000) {            if (jjtc000) {                jjtree.clearNodeScope(jjtn000);                jjtc000 = false;            } else {                jjtree.popNode();            }            if (jjte000 instanceof RuntimeException) {                {                    if (true) {                        throw (RuntimeException) jjte000;                    }                }            }            if (jjte000 instanceof ParseException) {                {                    if (true) {                        throw (ParseException) jjte000;                    }                }            }            {                if (true) {                    throw (Error) jjte000;                }            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void Table() throws ParseException {        /*@bgen(jjtree) Table */        ASTTable jjtn000 = new ASTTable(JJTTABLE);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        try {            label_2:            while (true) {                Column();                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                    case COLUMN:                    case TABLE_COLUMN:                        ;                        break;                    default:                        jj_la1[4] = jj_gen;                        break label_2;                }            }        } catch (Throwable jjte000) {            if (jjtc000) {                jjtree.clearNodeScope(jjtn000);                jjtc000 = false;            } else {                jjtree.popNode();            }            if (jjte000 instanceof RuntimeException) {                {                    if (true) {                        throw (RuntimeException) jjte000;                    }                }            }            if (jjte000 instanceof ParseException) {                {                    if (true) {                        throw (ParseException) jjte000;                    }                }            }            {                if (true) {                    throw (Error) jjte000;                }            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void Column() throws ParseException {        /*@bgen(jjtree) Column */        ASTColumn jjtn000 = new ASTColumn(JJTCOLUMN);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        try {            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case COLUMN:                    jj_consume_token(COLUMN);                    break;                case TABLE_COLUMN:                    jj_consume_token(TABLE_COLUMN);                    break;                default:                    jj_la1[5] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }            if (jj_2_1(2)) {                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                    case TABLE_COLUMN:                        jj_consume_token(TABLE_COLUMN);                        jjtn000.setHeader(true);                        break;                    default:                        jj_la1[6] = jj_gen;                        ;                }                Text();            } else {                ;            }        } catch (Throwable jjte000) {            if (jjtc000) {                jjtree.clearNodeScope(jjtn000);                jjtc000 = false;            } else {                jjtree.popNode();            }            if (jjte000 instanceof RuntimeException) {                {                    if (true) {                        throw (RuntimeException) jjte000;                    }                }            }            if (jjte000 instanceof ParseException) {                {                    if (true) {                        throw (ParseException) jjte000;                    }                }            }            {                if (true) {                    throw (Error) jjte000;                }            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void Text() throws ParseException {        /*@bgen(jjtree) Text */        ASTText jjtn000 = new ASTText(JJTTEXT);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        Token t;        try {            label_3:            while (true) {                if (jj_2_2(3)) {                    Anything();                } else if (jj_2_3(3)) {                    PlainText();                } else if (jj_2_4(3)) {                    Link();                } else if (jj_2_5(3)) {                    FootnoteRef();                } else if (jj_2_6(3)) {                    Footnote();                } else {                    jj_consume_token(-1);                    throw new ParseException();                }                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                    case ANY:                    case DEFAULT_LINK:                    case LINK_START:                    case ANY_START:                    case STUFF:                    case TABLE_LINK_START:                    case TABLE_ANY_START:                    case TABLE_STUFF:                    case TERM_LINK_START:                    case TERM_ANY_START:                    case TERM_STUFF:                        ;                        break;                    default:                        jj_la1[7] = jj_gen;                        break label_3;                }            }        } catch (Throwable jjte000) {            if (jjtc000) {                jjtree.clearNodeScope(jjtn000);                jjtc000 = false;            } else {                jjtree.popNode();            }            if (jjte000 instanceof RuntimeException) {                {                    if (true) {                        throw (RuntimeException) jjte000;                    }                }            }            if (jjte000 instanceof ParseException) {                {                    if (true) {                        throw (ParseException) jjte000;                    }                }            }            {                if (true) {                    throw (Error) jjte000;                }            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void Anything() throws ParseException {        /*@bgen(jjtree) Anything */        ASTAnything jjtn000 = new ASTAnything(JJTANYTHING);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        Token t;        try {            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case ANY:                    jj_consume_token(ANY);                    break;                case ANY_START:                    jj_consume_token(ANY_START);                    break;                case TABLE_ANY_START:                    jj_consume_token(TABLE_ANY_START);                    break;                case TERM_ANY_START:                    jj_consume_token(TERM_ANY_START);                    break;                default:                    jj_la1[8] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case ANYCHAR:                case TABLE_ANYCHAR:                case TERM_ANYCHAR:                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                        case ANYCHAR:                            t = jj_consume_token(ANYCHAR);                            break;                        case TABLE_ANYCHAR:                            t = jj_consume_token(TABLE_ANYCHAR);                            break;                        case TERM_ANYCHAR:                            t = jj_consume_token(TERM_ANYCHAR);                            break;                        default:                            jj_la1[9] = jj_gen;                            jj_consume_token(-1);                            throw new ParseException();                    }                    jjtn000.text = t.image;                    break;                default:                    jj_la1[10] = jj_gen;                    ;            }            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case END_ANY:                    jj_consume_token(END_ANY);                    break;                case TABLE_END_ANY:                    jj_consume_token(TABLE_END_ANY);                    break;                case TERM_END_ANY:                    jj_consume_token(TERM_END_ANY);                    break;                default:                    jj_la1[11] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void PlainText() throws ParseException {        /*@bgen(jjtree) PlainText */        ASTPlainText jjtn000 = new ASTPlainText(JJTPLAINTEXT);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        Token t;        try {            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case STUFF:                    t = jj_consume_token(STUFF);                    break;                case TABLE_STUFF:                    t = jj_consume_token(TABLE_STUFF);                    break;                case TERM_STUFF:                    t = jj_consume_token(TERM_STUFF);                    break;                default:                    jj_la1[12] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }            jjtree.closeNodeScope(jjtn000, true);            jjtc000 = false;            jjtn000.setText(t.image);        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void Link() throws ParseException {        /*@bgen(jjtree) Link */        ASTLink jjtn000 = new ASTLink(JJTLINK);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        Token text, link;        try {            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case LINK_START:                    jj_consume_token(LINK_START);                    break;                case DEFAULT_LINK:                    jj_consume_token(DEFAULT_LINK);                    break;                case TABLE_LINK_START:                    jj_consume_token(TABLE_LINK_START);                    break;                case TERM_LINK_START:                    jj_consume_token(TERM_LINK_START);                    break;                default:                    jj_la1[13] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case LINK_TEXT:                    text = jj_consume_token(LINK_TEXT);                    break;                case TABLE_LINK_TEXT:                    text = jj_consume_token(TABLE_LINK_TEXT);                    break;                case TERM_LINK_TEXT:                    text = jj_consume_token(TERM_LINK_TEXT);                    break;                default:                    jj_la1[14] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }            jjtn000.setText(text.image);            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case LINK_SEPARATOR:                case TABLE_LINK_SEPARATOR:                case TERM_LINK_SEPARATOR:                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                        case LINK_SEPARATOR:                            jj_consume_token(LINK_SEPARATOR);                            break;                        case TABLE_LINK_SEPARATOR:                            jj_consume_token(TABLE_LINK_SEPARATOR);                            break;                        case TERM_LINK_SEPARATOR:                            jj_consume_token(TERM_LINK_SEPARATOR);                            break;                        default:                            jj_la1[15] = jj_gen;                            jj_consume_token(-1);                            throw new ParseException();                    }                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                        case LINK_TEXT:                            link = jj_consume_token(LINK_TEXT);                            break;                        case TABLE_LINK_TEXT:                            link = jj_consume_token(TABLE_LINK_TEXT);                            break;                        case TERM_LINK_TEXT:                            link = jj_consume_token(TERM_LINK_TEXT);                            break;                        default:                            jj_la1[16] = jj_gen;                            jj_consume_token(-1);                            throw new ParseException();                    }                    jjtn000.setLinkText(link.image);                    break;                default:                    jj_la1[17] = jj_gen;                    ;            }            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case LINK_END:                    jj_consume_token(LINK_END);                    break;                case TABLE_LINK_END:                    jj_consume_token(TABLE_LINK_END);                    break;                case TERM_LINK_END:                    jj_consume_token(TERM_LINK_END);                    break;                default:                    jj_la1[18] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void FootnoteRef() throws ParseException {        /*@bgen(jjtree) FootnoteRef */        ASTFootnoteRef jjtn000 = new ASTFootnoteRef(JJTFOOTNOTEREF);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        Token text;        try {            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case LINK_START:                    jj_consume_token(LINK_START);                    break;                case TABLE_LINK_START:                    jj_consume_token(TABLE_LINK_START);                    break;                case TERM_LINK_START:                    jj_consume_token(TERM_LINK_START);                    break;                default:                    jj_la1[19] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case LINK_NUMERIC:                    text = jj_consume_token(LINK_NUMERIC);                    break;                case TABLE_LINK_NUMERIC:                    text = jj_consume_token(TABLE_LINK_NUMERIC);                    break;                case TERM_LINK_NUMERIC:                    text = jj_consume_token(TERM_LINK_NUMERIC);                    break;                default:                    jj_la1[20] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }            jjtn000.setText(text.image);            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case LINK_END:                    jj_consume_token(LINK_END);                    break;                case TABLE_LINK_END:                    jj_consume_token(TABLE_LINK_END);                    break;                case TERM_LINK_END:                    jj_consume_token(TERM_LINK_END);                    break;                default:                    jj_la1[21] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final public void Footnote() throws ParseException {        /*@bgen(jjtree) Footnote */        ASTFootnote jjtn000 = new ASTFootnote(JJTFOOTNOTE);        boolean jjtc000 = true;        jjtree.openNodeScope(jjtn000);        Token text;        try {            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case LINK_START:                    jj_consume_token(LINK_START);                    break;                case DEFAULT_LINK:                    jj_consume_token(DEFAULT_LINK);                    break;                case TABLE_LINK_START:                    jj_consume_token(TABLE_LINK_START);                    break;                case TERM_LINK_START:                    jj_consume_token(TERM_LINK_START);                    break;                default:                    jj_la1[22] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case FOOTNOTE:                    jj_consume_token(FOOTNOTE);                    break;                case TABLE_FOOTNOTE:                    jj_consume_token(TABLE_FOOTNOTE);                    break;                case TERM_FOOTNOTE:                    jj_consume_token(TERM_FOOTNOTE);                    break;                default:                    jj_la1[23] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case LINK_NUMERIC:                    text = jj_consume_token(LINK_NUMERIC);                    break;                case TABLE_LINK_NUMERIC:                    text = jj_consume_token(TABLE_LINK_NUMERIC);                    break;                case TERM_LINK_NUMERIC:                    text = jj_consume_token(TERM_LINK_NUMERIC);                    break;                default:                    jj_la1[24] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }            jjtn000.setText(text.image);            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {                case LINK_END:                    jj_consume_token(LINK_END);                    break;                case TABLE_LINK_END:                    jj_consume_token(TABLE_LINK_END);                    break;                case TERM_LINK_END:                    jj_consume_token(TERM_LINK_END);                    break;                default:                    jj_la1[25] = jj_gen;                    jj_consume_token(-1);                    throw new ParseException();            }        } finally {            if (jjtc000) {                jjtree.closeNodeScope(jjtn000, true);            }        }    }    static final private boolean jj_2_1(int xla) {        jj_la = xla;        jj_lastpos = jj_scanpos = token;        try {            return !jj_3_1();        } catch (LookaheadSuccess ls) {            return true;        } finally {            jj_save(0, xla);        }    }    static final private boolean jj_2_2(int xla) {        jj_la = xla;        jj_lastpos = jj_scanpos = token;        try {            return !jj_3_2();        } catch (LookaheadSuccess ls) {            return true;        } finally {            jj_save(1, xla);        }    }    static final private boolean jj_2_3(int xla) {        jj_la = xla;        jj_lastpos = jj_scanpos = token;        try {            return !jj_3_3();        } catch (LookaheadSuccess ls) {            return true;        } finally {            jj_save(2, xla);        }    }    static final private boolean jj_2_4(int xla) {        jj_la = xla;        jj_lastpos = jj_scanpos = token;        try {            return !jj_3_4();        } catch (LookaheadSuccess ls) {            return true;        } finally {            jj_save(3, xla);        }    }    static final private boolean jj_2_5(int xla) {        jj_la = xla;        jj_lastpos = jj_scanpos = token;        try {            return !jj_3_5();        } catch (LookaheadSuccess ls) {            return true;        } finally {            jj_save(4, xla);        }    }    static final private boolean jj_2_6(int xla) {        jj_la = xla;        jj_lastpos = jj_scanpos = token;        try {            return !jj_3_6();        } catch (LookaheadSuccess ls) {            return true;        } finally {            jj_save(5, xla);        }    }    static final private boolean jj_3R_10() {        Token xsp;        xsp = jj_scanpos;        if (jj_scan_token(22)) {            jj_scanpos = xsp;            if (jj_scan_token(8)) {                jj_scanpos = xsp;                if (jj_scan_token(28)) {                    jj_scanpos = xsp;                    if (jj_scan_token(35)) {                        return true;                    }                }            }        }        xsp = jj_scanpos;        if (jj_scan_token(43)) {            jj_scanpos = xsp;            if (jj_scan_token(48)) {                jj_scanpos = xsp;                if (jj_scan_token(53)) {                    return true;                }            }        }        xsp = jj_scanpos;        if (jj_scan_token(44)) {            jj_scanpos = xsp;            if (jj_scan_token(49)) {                jj_scanpos = xsp;                if (jj_scan_token(54)) {                    return true;                }            }        }        return false;    }    static final private boolean jj_3_6() {        if (jj_3R_10()) {            return true;        }        return false;    }    static final private boolean jj_3_1() {        Token xsp;        xsp = jj_scanpos;        if (jj_3R_4()) {            jj_scanpos = xsp;        }        if (jj_3R_5()) {            return true;        }        return false;    }    static final private boolean jj_3R_13() {        Token xsp;        xsp = jj_scanpos;        if (jj_scan_token(45)) {            jj_scanpos = xsp;            if (jj_scan_token(50)) {                jj_scanpos = xsp;                if (jj_scan_token(55)) {                    return true;                }            }        }        return false;    }    static final private boolean jj_3R_6() {        Token xsp;        xsp = jj_scanpos;        if (jj_scan_token(4)) {            jj_scanpos = xsp;            if (jj_scan_token(23)) {                jj_scanpos = xsp;                if (jj_scan_token(29)) {                    jj_scanpos = xsp;                    if (jj_scan_token(36)) {                        return true;                    }                }            }        }        xsp = jj_scanpos;        if (jj_3R_12()) {            jj_scanpos = xsp;        }        xsp = jj_scanpos;        if (jj_scan_token(13)) {            jj_scanpos = xsp;            if (jj_scan_token(17)) {                jj_scanpos = xsp;                if (jj_scan_token(21)) {                    return true;                }            }        }        return false;    }    static final private boolean jj_3_4() {        if (jj_3R_8()) {            return true;        }        return false;    }    static final private boolean jj_3_5() {        if (jj_3R_9()) {            return true;        }        return false;    }    static final private boolean jj_3R_8() {        Token xsp;        xsp = jj_scanpos;        if (jj_scan_token(22)) {            jj_scanpos = xsp;            if (jj_scan_token(8)) {                jj_scanpos = xsp;                if (jj_scan_token(28)) {                    jj_scanpos = xsp;                    if (jj_scan_token(35)) {                        return true;                    }                }            }        }        xsp = jj_scanpos;        if (jj_scan_token(42)) {            jj_scanpos = xsp;            if (jj_scan_token(47)) {                jj_scanpos = xsp;                if (jj_scan_token(52)) {                    return true;                }            }        }        xsp = jj_scanpos;        if (jj_3R_13()) {            jj_scanpos = xsp;        }        xsp = jj_scanpos;        if (jj_scan_token(46)) {            jj_scanpos = xsp;            if (jj_scan_token(51)) {                jj_scanpos = xsp;                if (jj_scan_token(56)) {                    return true;                }            }        }        return false;    }    static final private boolean jj_3_3() {        if (jj_3R_7()) {            return true;        }        return false;    }    static final private boolean jj_3R_4() {        if (jj_scan_token(TABLE_COLUMN)) {            return true;        }        return false;    }    static final private boolean jj_3R_11() {        Token xsp;        xsp = jj_scanpos;        if (jj_3_2()) {            jj_scanpos = xsp;            if (jj_3_3()) {                jj_scanpos = xsp;                if (jj_3_4()) {                    jj_scanpos = xsp;                    if (jj_3_5()) {                        jj_scanpos = xsp;                        if (jj_3_6()) {                            return true;                        }                    }                }            }        }        return false;    }    static final private boolean jj_3R_9() {        Token xsp;        xsp = jj_scanpos;        if (jj_scan_token(22)) {            jj_scanpos = xsp;            if (jj_scan_token(28)) {                jj_scanpos = xsp;                if (jj_scan_token(35)) {                    return true;                }            }        }        xsp = jj_scanpos;        if (jj_scan_token(44)) {            jj_scanpos = xsp;            if (jj_scan_token(49)) {                jj_scanpos = xsp;                if (jj_scan_token(54)) {                    return true;                }            }        }        xsp = jj_scanpos;        if (jj_scan_token(46)) {            jj_scanpos = xsp;            if (jj_scan_token(51)) {                jj_scanpos = xsp;                if (jj_scan_token(56)) {                    return true;                }            }        }        return false;    }    static final private boolean jj_3_2() {        if (jj_3R_6()) {            return true;        }        return false;    }    static final private boolean jj_3R_5() {        Token xsp;        if (jj_3R_11()) {            return true;        }        while (true) {            xsp = jj_scanpos;            if (jj_3R_11()) {                jj_scanpos = xsp;                break;            }        }        return false;    }    static final private boolean jj_3R_12() {        Token xsp;        xsp = jj_scanpos;        if (jj_scan_token(10)) {            jj_scanpos = xsp;            if (jj_scan_token(14)) {                jj_scanpos = xsp;                if (jj_scan_token(18)) {                    return true;                }            }        }        return false;    }    static final private boolean jj_3R_7() {        Token xsp;        xsp = jj_scanpos;        if (jj_scan_token(24)) {            jj_scanpos = xsp;            if (jj_scan_token(31)) {                jj_scanpos = xsp;                if (jj_scan_token(38)) {                    return true;                }            }        }        return false;    }    static private boolean jj_initialized_once = false;    static public wikiTokenManager token_source;    static SimpleCharStream jj_input_stream;    static public Token token, jj_nt;    static private int jj_ntk;    static private Token jj_scanpos, jj_lastpos;    static private int jj_la;    static public boolean lookingAhead = false;    static private boolean jj_semLA;    static private int jj_gen;    static final private int[] jj_la1 = new int[26];    static private int[] jj_la1_0;    static private int[] jj_la1_1;    static {        jj_la1_0();        jj_la1_1();    }    private static void jj_la1_0() {        jj_la1_0 = new int[]{0xf1c0017e, 0x0, 0xf1c0017e, 0xb1c00110, 0x40000020, 0x40000020, 0x40000000, 0xb1c00110, 0x20800010, 0x44400, 0x44400, 0x222000, 0x81000000, 0x10400100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10400000, 0x0, 0x0, 0x10400100, 0x0, 0x0, 0x0,};    }    private static void jj_la1_1() {        jj_la1_1 = new int[]{0x6000058, 0x6000000, 0x6000058, 0x58, 0x0, 0x0, 0x0, 0x58, 0x10, 0x0, 0x0, 0x0, 0x40, 0x8, 0x108400, 0x842000, 0x108400, 0x842000, 0x1084000, 0x8, 0x421000, 0x1084000, 0x8, 0x210800, 0x421000, 0x1084000,};    }    static final private JJCalls[] jj_2_rtns = new JJCalls[6];    static private boolean jj_rescan = false;    static private int jj_gc = 0;    public wiki(java.io.InputStream stream) {        if (jj_initialized_once) {            System.out.println("ERROR: Second call to constructor of static parser.  You must");            System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");            System.out.println("       during parser generation.");            throw new Error();        }        jj_initialized_once = true;        jj_input_stream = new SimpleCharStream(stream, 1, 1);        token_source = new wikiTokenManager(jj_input_stream);        token = new Token();        jj_ntk = -1;        jj_gen = 0;        for (int i = 0; i < 26; i++) {            jj_la1[i] = -1;        }        for (int i = 0; i < jj_2_rtns.length; i++) {            jj_2_rtns[i] = new JJCalls();        }    }    static public void ReInit(java.io.InputStream stream) {        jj_input_stream.ReInit(stream, 1, 1);        token_source.ReInit(jj_input_stream);        token = new Token();        jj_ntk = -1;        jjtree.reset();        jj_gen = 0;        for (int i = 0; i < 26; i++) {            jj_la1[i] = -1;        }        for (int i = 0; i < jj_2_rtns.length; i++) {            jj_2_rtns[i] = new JJCalls();        }    }    public wiki(java.io.Reader stream) {        if (jj_initialized_once) {            System.out.println("ERROR: Second call to constructor of static parser.  You must");            System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");            System.out.println("       during parser generation.");            throw new Error();        }        jj_initialized_once = true;        jj_input_stream = new SimpleCharStream(stream, 1, 1);        token_source = new wikiTokenManager(jj_input_stream);        token = new Token();        jj_ntk = -1;        jj_gen = 0;        for (int i = 0; i < 26; i++) {            jj_la1[i] = -1;        }        for (int i = 0; i < jj_2_rtns.length; i++) {            jj_2_rtns[i] = new JJCalls();        }    }    static public void ReInit(java.io.Reader stream) {        jj_input_stream.ReInit(stream, 1, 1);        token_source.ReInit(jj_input_stream);        token = new Token();        jj_ntk = -1;        jjtree.reset();        jj_gen = 0;        for (int i = 0; i < 26; i++) {            jj_la1[i] = -1;        }        for (int i = 0; i < jj_2_rtns.length; i++) {            jj_2_rtns[i] = new JJCalls();        }    }    public wiki(wikiTokenManager tm) {        if (jj_initialized_once) {            System.out.println("ERROR: Second call to constructor of static parser.  You must");            System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");            System.out.println("       during parser generation.");            throw new Error();        }        jj_initialized_once = true;        token_source = tm;        token = new Token();        jj_ntk = -1;        jj_gen = 0;        for (int i = 0; i < 26; i++) {            jj_la1[i] = -1;        }        for (int i = 0; i < jj_2_rtns.length; i++) {            jj_2_rtns[i] = new JJCalls();        }    }    public void ReInit(wikiTokenManager tm) {        token_source = tm;        token = new Token();        jj_ntk = -1;        jjtree.reset();        jj_gen = 0;        for (int i = 0; i < 26; i++) {            jj_la1[i] = -1;        }        for (int i = 0; i < jj_2_rtns.length; i++) {            jj_2_rtns[i] = new JJCalls();        }    }    static final private Token jj_consume_token(int kind) throws ParseException {        Token oldToken;        if ((oldToken = token).next != null) {            token = token.next;        } else {            token = token.next = token_source.getNextToken();        }        jj_ntk = -1;        if (token.kind == kind) {            jj_gen++;            if (++jj_gc > 100) {                jj_gc = 0;                for (int i = 0; i < jj_2_rtns.length; i++) {                    JJCalls c = jj_2_rtns[i];                    while (c != null) {                        if (c.gen < jj_gen) {                            c.first = null;                        }                        c = c.next;                    }                }            }            return token;        }        token = oldToken;        jj_kind = kind;        throw generateParseException();    }    static private final class LookaheadSuccess extends java.lang.Error {    }    static final private LookaheadSuccess jj_ls = new LookaheadSuccess();    static final private boolean jj_scan_token(int kind) {        if (jj_scanpos == jj_lastpos) {            jj_la--;            if (jj_scanpos.next == null) {                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();            } else {                jj_lastpos = jj_scanpos = jj_scanpos.next;            }        } else {            jj_scanpos = jj_scanpos.next;        }        if (jj_rescan) {            int i = 0;            Token tok = token;            while (tok != null && tok != jj_scanpos) {                i++;                tok = tok.next;            }            if (tok != null) {                jj_add_error_token(kind, i);            }        }        if (jj_scanpos.kind != kind) {            return true;        }        if (jj_la == 0 && jj_scanpos == jj_lastpos) {            throw jj_ls;        }        return false;    }    static final public Token getNextToken() {        if (token.next != null) {            token = token.next;        } else {            token = token.next = token_source.getNextToken();        }        jj_ntk = -1;        jj_gen++;        return token;    }    static final public Token getToken(int index) {        Token t = lookingAhead ? jj_scanpos : token;        for (int i = 0; i < index; i++) {            if (t.next != null) {                t = t.next;            } else {                t = t.next = token_source.getNextToken();            }        }        return t;    }    static final private int jj_ntk() {        if ((jj_nt = token.next) == null) {            return (jj_ntk = (token.next = token_source.getNextToken()).kind);        } else {            return (jj_ntk = jj_nt.kind);        }    }    static private java.util.Vector jj_expentries = new java.util.Vector();    static private int[] jj_expentry;    static private int jj_kind = -1;    static private int[] jj_lasttokens = new int[100];    static private int jj_endpos;    static private void jj_add_error_token(int kind, int pos) {        if (pos >= 100) {            return;        }        if (pos == jj_endpos + 1) {            jj_lasttokens[jj_endpos++] = kind;        } else if (jj_endpos != 0) {            jj_expentry = new int[jj_endpos];            for (int i = 0; i < jj_endpos; i++) {                jj_expentry[i] = jj_lasttokens[i];            }            boolean exists = false;            for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {                int[] oldentry = (int[]) (e.nextElement());                if (oldentry.length == jj_expentry.length) {                    exists = true;                    for (int i = 0; i < jj_expentry.length; i++) {                        if (oldentry[i] != jj_expentry[i]) {                            exists = false;                            break;                        }                    }                    if (exists) {                        break;                    }                }            }            if (!exists) {                jj_expentries.addElement(jj_expentry);            }            if (pos != 0) {                jj_lasttokens[(jj_endpos = pos) - 1] = kind;            }        }    }    static public ParseException generateParseException() {        jj_expentries.removeAllElements();        boolean[] la1tokens = new boolean[59];        for (int i = 0; i < 59; i++) {            la1tokens[i] = false;        }        if (jj_kind >= 0) {            la1tokens[jj_kind] = true;            jj_kind = -1;        }        for (int i = 0; i < 26; i++) {            if (jj_la1[i] == jj_gen) {                for (int j = 0; j < 32; j++) {                    if ((jj_la1_0[i] & (1 << j)) != 0) {                        la1tokens[j] = true;                    }                    if ((jj_la1_1[i] & (1 << j)) != 0) {                        la1tokens[32 + j] = true;                    }                }            }        }        for (int i = 0; i < 59; i++) {            if (la1tokens[i]) {                jj_expentry = new int[1];                jj_expentry[0] = i;                jj_expentries.addElement(jj_expentry);            }        }        jj_endpos = 0;        jj_rescan_token();        jj_add_error_token(0, 0);        int[][] exptokseq = new int[jj_expentries.size()][];        for (int i = 0; i < jj_expentries.size(); i++) {            exptokseq[i] = (int[]) jj_expentries.elementAt(i);        }        return new ParseException(token, exptokseq, tokenImage);    }    static final public void enable_tracing() {    }    static final public void disable_tracing() {    }    static final private void jj_rescan_token() {        jj_rescan = true;        for (int i = 0; i < 6; i++) {            JJCalls p = jj_2_rtns[i];            do {                if (p.gen > jj_gen) {                    jj_la = p.arg;                    jj_lastpos = jj_scanpos = p.first;                    switch (i) {                        case 0:                            jj_3_1();                            break;                        case 1:                            jj_3_2();                            break;                        case 2:                            jj_3_3();                            break;                        case 3:                            jj_3_4();                            break;                        case 4:                            jj_3_5();                            break;                        case 5:                            jj_3_6();                            break;                    }                }                p = p.next;            } while (p != null);        }        jj_rescan = false;    }    static final private void jj_save(int index, int xla) {        JJCalls p = jj_2_rtns[index];        while (p.gen > jj_gen) {            if (p.next == null) {                p = p.next = new JJCalls();                break;            }            p = p.next;        }        p.gen = jj_gen + xla - jj_la;        p.first = token;        p.arg = xla;    }    static final class JJCalls {        int gen;        Token first;        int arg;        JJCalls next;    }}