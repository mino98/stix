/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package uk.ac.ed.inf.wimo.stix.gui.backend.workflow;

import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.*;
import java.util.HashMap;

/**
 * NOTE: Thread-safety is only guaranteed for CRUD operations, not for bootstrap functions ({@link #createAndPopulate} and {@link #insertExampleData}).
 * @author alex
 */
public class SQLiteWorkflowStore implements WorkflowStore {
    private Connection conn;
    
    private static SQLiteWorkflowStore instance;
    public synchronized static SQLiteWorkflowStore getInstance() {
        if (instance == null)
            try {
                instance = new SQLiteWorkflowStore();
            } catch (SQLException s) {
                throw new RuntimeException("Couldn't instantiate workflowÂ database instance: " + s.toString());
            }
        return instance;
    }


    private SQLiteWorkflowStore() throws SQLException {
        try {
            Class.forName("org.sqlite.JDBC");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SQLiteWorkflowStore.class.getName()).log(Level.SEVERE, "Sqlite JDBC class not available.", ex);
        }
        conn = DriverManager.getConnection("jdbc:sqlite:/var/stix/workflows.db");
    }

    
    public synchronized int createWorkflow(Workflow workflow) throws WorkflowStoreException {
        // Ensure that the document doesn't already exist.
        // TODO: A literal SQL query (ie. checkDocumentExists(name)) would be cleaner.
        try {
            getWorkflow(workflow.getName());
            throw new WorkflowAlreadyExistsException("Workflow already exists.");
        } catch (WorkflowDoesNotExistException ex) {
            // Good.
        }

        try {
            PreparedStatement prep = conn.prepareStatement(
                    "INSERT INTO workflows (name, content) VALUES (?, ?);");
            prep.setString(1, workflow.getName());
            prep.setString(2, workflow.serialize());
            prep.executeUpdate();

            // Get autoincrementid

            ResultSet rs = prep.getGeneratedKeys();
            if (rs != null && rs.next()) {
                return rs.getInt(1);
            } else {
                throw new WorkflowStoreException("Couldn't get autogenerated ID for new workflow");
            }

        } catch (SQLException ex) {
            throw loggedWorkflowStoreException(ex, "Couldn't create workflow in the workflow store.");
        }
    }

    
    public Workflow getWorkflow(String name) throws WorkflowStoreException {
        try {
            PreparedStatement prep = conn.prepareStatement("SELECT * FROM workflows WHERE name = ?;");
            prep.setString(1, name);
            ResultSet rs = prep.executeQuery();
            if (rs.next()) {
                return Workflow.unserialize(rs.getString("content"));
            } else {
                throw new WorkflowDoesNotExistException("Workflow does not exist.");
            }
        } catch (SQLException ex) {
            throw loggedWorkflowStoreException(ex, "Couldn't retrieve workflow from the workflow store.");
        }

    }

    
    public synchronized void updateWorkflow(Integer id, Workflow workflow) throws WorkflowStoreException {
        workflow.incrementRevision();

        // Ensure document exists already.
        getWorkflow(id);

        try {
            PreparedStatement prep = conn.prepareStatement("UPDATE workflows SET content = ?, name = ? WHERE id = ?");
            prep.setString(1, workflow.serialize());
            prep.setString(2, workflow.getName());
            prep.setInt(3, id);
            prep.executeUpdate();
        } catch (SQLException ex) {
            throw loggedWorkflowStoreException(ex, "Couldn't update workflow in the workflow store.");
        }
    }

    
    public synchronized void deleteWorkflow(Integer id) throws WorkflowStoreException {
        // Ensure document exists already.
        getWorkflowName(id);
        
        try {
            PreparedStatement prep = conn.prepareStatement("DELETE FROM workflows WHERE id = ?;");
            prep.setInt(1, id);
            prep.executeUpdate();
        } catch (SQLException ex) {
            throw loggedWorkflowStoreException(ex, "Couldn't delete workflow from the workflow store.");
        }
    }

    /**
     * Creates the document store table.
     */
    public void createDatabase() {
        try {
            Statement stat = conn.createStatement();
            stat.executeUpdate("DROP TABLE IF EXISTS workflows;");
            stat.executeUpdate("CREATE TABLE workflows (" +
                    "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "name TEXT," +
                    "content TEXT" +
                    ");");
        } catch (SQLException ex) {
            Logger.getLogger(SQLiteWorkflowStore.class.getName()).log(Level.SEVERE, "Exception while creating workflows table.", ex);
        }

    }

    private WorkflowStoreException loggedWorkflowStoreException(SQLException ex, String message) {
        Logger.getLogger(SQLiteWorkflowStore.class.getName()).log(Level.SEVERE, message, ex);
        return new WorkflowStoreException(message, ex);

    }

    public Map<Integer, String> getWorkflows() throws WorkflowStoreException {
        Map<Integer, String> documents = new HashMap<Integer, String>();

        try {
            PreparedStatement prep = conn.prepareStatement("SELECT * FROM workflows;");
            ResultSet rs = prep.executeQuery();
            while (rs.next()) {
                documents.put(rs.getInt("id"), rs.getString("name"));
            }
        } catch (SQLException ex) {
            throw loggedWorkflowStoreException(ex, "Couldn't retrieve workflows from the workflow store.");
        }
        return documents;
    }

    public Workflow getWorkflow(Integer id) throws WorkflowStoreException {
        try {
            PreparedStatement prep = conn.prepareStatement("SELECT * FROM workflows WHERE id = ?;");
            prep.setInt(1, id);
            ResultSet rs = prep.executeQuery();
            if (rs.next()) {
                return Workflow.unserialize(rs.getString("content"));
            } else {
                throw new WorkflowDoesNotExistException("Workflow does not exist.");
            }
        } catch (SQLException ex) {
            throw loggedWorkflowStoreException(ex, "Couldn't retrieve workflow from the workflow store.");
        }
    }

    public String getWorkflowName(Integer id) throws WorkflowStoreException {
        try {
            PreparedStatement prep = conn.prepareStatement("SELECT name FROM workflows WHERE id = ?;");
            prep.setInt(1, id);
            ResultSet rs = prep.executeQuery();
            if (rs.next()) {
                return rs.getString("name");
            } else {
                throw new WorkflowDoesNotExistException("Workflow does not exist.");
            }
        } catch (SQLException ex) {
            throw loggedWorkflowStoreException(ex, "Couldn't get workflow name from the workflow store.");
        }

    }
}
